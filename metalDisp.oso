OpenShadingLanguage 1.00
# Compiled by oslc 1.7.4.pixar38bde12
# options: 
shader metalDisp
oparam	float	resultF	0		%read{3,6} %write{6,13}
oparam	float	disp	0		%read{6,6} %write{5,5}
global	point	P	%read{1,1} %write{2147483647,-1} %derivs
local	point	shaderP	%read{7,10} %write{1,1} %derivs
const	string	$const1	"object"		%read{1,1} %write{2147483647,-1}
const	string	$const2	"transform"		%read{0,0} %write{2147483647,-1}
const	string	$const3	"common"		%read{1,1} %write{2147483647,-1}
temp	color	$tmp1	%read{3,3} %write{2,2}
const	string	$const4	"rgb"		%read{2,2} %write{2147483647,-1}
const	int	$const5	0		%read{7,7} %write{2147483647,-1}
const	float	$const6	0		%read{2,2} %write{2147483647,-1}
temp	int	$tmp2	%read{4,4} %write{3,3}
const	float	$const7	-0.5		%read{5,5} %write{2147483647,-1}
const	string	$const8	"metalDisp.tx"		%read{13,13} %write{2147483647,-1}
temp	float	$tmp3	%read{8,8} %write{7,7} %derivs
temp	float	$tmp4	%read{9,9} %write{8,8} %derivs
const	float	$const10	6		%read{8,11} %write{2147483647,-1}
const	float	$const11	0.5		%read{9,12} %write{2147483647,-1}
temp	float	$tmp5	%read{13,13} %write{9,9} %derivs
const	int	$const12	1		%read{10,10} %write{2147483647,-1}
temp	float	$tmp6	%read{11,11} %write{10,10} %derivs
temp	float	$tmp7	%read{12,12} %write{11,11} %derivs
temp	float	$tmp8	%read{13,13} %write{12,12} %derivs
code ___main___
# metalDisp.osl:6
# 	point shaderP = transform("object",P);
	functioncall	$const2 2 	%filename{"metalDisp.osl"} %line{6} %argrw{"r"}
# /opt/pixar/RenderManProServer-21.5/lib/osl/include/stdosl.h:243
# point  transform (matrix Mto, point p) BUILTIN;
	transform	shaderP $const3 $const1 P 	%filename{"/opt/pixar/RenderManProServer-21.5/lib/osl/include/stdosl.h"} %line{243} %argrw{"wrrr"}
# metalDisp.osl:9
# 	if (resultF == color ("rgb",0,0,0))
	color		$tmp1 $const4 $const6 $const6 $const6 	%filename{"metalDisp.osl"} %line{9} %argrw{"wrrrr"}
	eq		$tmp2 resultF $tmp1 	%argrw{"wrr"}
	if		$tmp2 6 6 	%argrw{"r"}
# metalDisp.osl:10
# 		disp = -0.5;
	assign		disp $const7 	%line{10} %argrw{"wr"}
# metalDisp.osl:14
# resultF = resultF*disp;
	mul		resultF resultF disp 	%line{14} %argrw{"wrr"}
# metalDisp.osl:15
# 	resultF = (float)texture("metalDisp.tx",shaderP[0]/6+0.5,shaderP[1]/6+0.5);
	compref		$tmp3 shaderP $const5 	%line{15} %argrw{"wrr"}
	div		$tmp4 $tmp3 $const10 	%argrw{"wrr"}
	add		$tmp5 $tmp4 $const11 	%argrw{"wrr"}
	compref		$tmp6 shaderP $const12 	%argrw{"wrr"}
	div		$tmp7 $tmp6 $const10 	%argrw{"wrr"}
	add		$tmp8 $tmp7 $const11 	%argrw{"wrr"}
	texture		resultF $const8 $tmp5 $tmp8 	%argrw{"wrrr"} %argderivs{2,3}
	end
